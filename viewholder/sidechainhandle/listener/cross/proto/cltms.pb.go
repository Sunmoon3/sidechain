// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: sidechain/listener/cross/proto/cltms.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//转移用的世界状态
type CrossLanguageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid        string   `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	Chainid     string   `protobuf:"bytes,2,opt,name=chainid,proto3" json:"chainid,omitempty"`
	Senderid    string   `protobuf:"bytes,3,opt,name=senderid,proto3" json:"senderid,omitempty"`
	Recverid    string   `protobuf:"bytes,4,opt,name=recverid,proto3" json:"recverid,omitempty"`
	Rw          int32    `protobuf:"varint,5,opt,name=rw,proto3" json:"rw,omitempty"`
	Sendercerts []byte   `protobuf:"bytes,6,opt,name=sendercerts,proto3" json:"sendercerts,omitempty"`
	Sendersign  []byte   `protobuf:"bytes,7,opt,name=sendersign,proto3" json:"sendersign,omitempty"`
	Apk         []byte   `protobuf:"bytes,8,opt,name=apk,proto3" json:"apk,omitempty"`
	Messages    []byte   `protobuf:"bytes,9,opt,name=messages,proto3" json:"messages,omitempty"`
	Vdfsign     []byte   `protobuf:"bytes,10,opt,name=vdfsign,proto3" json:"vdfsign,omitempty"`
	Sigmas      [][]byte `protobuf:"bytes,11,rep,name=sigmas,proto3" json:"sigmas,omitempty"`
}

func (x *CrossLanguageRequest) Reset() {
	*x = CrossLanguageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sidechain_listener_cross_proto_cltms_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossLanguageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossLanguageRequest) ProtoMessage() {}

func (x *CrossLanguageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sidechain_listener_cross_proto_cltms_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossLanguageRequest.ProtoReflect.Descriptor instead.
func (*CrossLanguageRequest) Descriptor() ([]byte, []int) {
	return file_sidechain_listener_cross_proto_cltms_proto_rawDescGZIP(), []int{0}
}

func (x *CrossLanguageRequest) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *CrossLanguageRequest) GetChainid() string {
	if x != nil {
		return x.Chainid
	}
	return ""
}

func (x *CrossLanguageRequest) GetSenderid() string {
	if x != nil {
		return x.Senderid
	}
	return ""
}

func (x *CrossLanguageRequest) GetRecverid() string {
	if x != nil {
		return x.Recverid
	}
	return ""
}

func (x *CrossLanguageRequest) GetRw() int32 {
	if x != nil {
		return x.Rw
	}
	return 0
}

func (x *CrossLanguageRequest) GetSendercerts() []byte {
	if x != nil {
		return x.Sendercerts
	}
	return nil
}

func (x *CrossLanguageRequest) GetSendersign() []byte {
	if x != nil {
		return x.Sendersign
	}
	return nil
}

func (x *CrossLanguageRequest) GetApk() []byte {
	if x != nil {
		return x.Apk
	}
	return nil
}

func (x *CrossLanguageRequest) GetMessages() []byte {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *CrossLanguageRequest) GetVdfsign() []byte {
	if x != nil {
		return x.Vdfsign
	}
	return nil
}

func (x *CrossLanguageRequest) GetSigmas() [][]byte {
	if x != nil {
		return x.Sigmas
	}
	return nil
}

type CrossLanguageRespose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *CrossLanguageRespose) Reset() {
	*x = CrossLanguageRespose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sidechain_listener_cross_proto_cltms_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossLanguageRespose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossLanguageRespose) ProtoMessage() {}

func (x *CrossLanguageRespose) ProtoReflect() protoreflect.Message {
	mi := &file_sidechain_listener_cross_proto_cltms_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossLanguageRespose.ProtoReflect.Descriptor instead.
func (*CrossLanguageRespose) Descriptor() ([]byte, []int) {
	return file_sidechain_listener_cross_proto_cltms_proto_rawDescGZIP(), []int{1}
}

func (x *CrossLanguageRespose) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CrossLanguageRespose) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

var File_sidechain_listener_cross_proto_cltms_proto protoreflect.FileDescriptor

var file_sidechain_listener_cross_proto_cltms_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x73, 0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x63, 0x6c, 0x74, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xae, 0x02, 0x0a, 0x14, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x76, 0x65, 0x72,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x76, 0x65, 0x72,
	0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x72, 0x77, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x63, 0x65, 0x72, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x63,
	0x65, 0x72, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x69,
	0x67, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x73, 0x69, 0x67, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x61, 0x70, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x64, 0x66, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x76, 0x64, 0x66, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x69, 0x67, 0x6d, 0x61, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x69,
	0x67, 0x6d, 0x61, 0x73, 0x22, 0x40, 0x0a, 0x14, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x32, 0x59, 0x0a, 0x0c, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x07, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x49,
	0x6e, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30,
	0x01, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sidechain_listener_cross_proto_cltms_proto_rawDescOnce sync.Once
	file_sidechain_listener_cross_proto_cltms_proto_rawDescData = file_sidechain_listener_cross_proto_cltms_proto_rawDesc
)

func file_sidechain_listener_cross_proto_cltms_proto_rawDescGZIP() []byte {
	file_sidechain_listener_cross_proto_cltms_proto_rawDescOnce.Do(func() {
		file_sidechain_listener_cross_proto_cltms_proto_rawDescData = protoimpl.X.CompressGZIP(file_sidechain_listener_cross_proto_cltms_proto_rawDescData)
	})
	return file_sidechain_listener_cross_proto_cltms_proto_rawDescData
}

var file_sidechain_listener_cross_proto_cltms_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_sidechain_listener_cross_proto_cltms_proto_goTypes = []interface{}{
	(*CrossLanguageRequest)(nil), // 0: proto.CrossLanguageRequest
	(*CrossLanguageRespose)(nil), // 1: proto.CrossLanguageRespose
}
var file_sidechain_listener_cross_proto_cltms_proto_depIdxs = []int32{
	0, // 0: proto.CrossService.CrossIn:input_type -> proto.CrossLanguageRequest
	1, // 1: proto.CrossService.CrossIn:output_type -> proto.CrossLanguageRespose
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_sidechain_listener_cross_proto_cltms_proto_init() }
func file_sidechain_listener_cross_proto_cltms_proto_init() {
	if File_sidechain_listener_cross_proto_cltms_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sidechain_listener_cross_proto_cltms_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossLanguageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sidechain_listener_cross_proto_cltms_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossLanguageRespose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sidechain_listener_cross_proto_cltms_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sidechain_listener_cross_proto_cltms_proto_goTypes,
		DependencyIndexes: file_sidechain_listener_cross_proto_cltms_proto_depIdxs,
		MessageInfos:      file_sidechain_listener_cross_proto_cltms_proto_msgTypes,
	}.Build()
	File_sidechain_listener_cross_proto_cltms_proto = out.File
	file_sidechain_listener_cross_proto_cltms_proto_rawDesc = nil
	file_sidechain_listener_cross_proto_cltms_proto_goTypes = nil
	file_sidechain_listener_cross_proto_cltms_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CrossServiceClient is the client API for CrossService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CrossServiceClient interface {
	CrossIn(ctx context.Context, opts ...grpc.CallOption) (CrossService_CrossInClient, error)
}

type crossServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCrossServiceClient(cc grpc.ClientConnInterface) CrossServiceClient {
	return &crossServiceClient{cc}
}

func (c *crossServiceClient) CrossIn(ctx context.Context, opts ...grpc.CallOption) (CrossService_CrossInClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CrossService_serviceDesc.Streams[0], "/proto.CrossService/CrossIn", opts...)
	if err != nil {
		return nil, err
	}
	x := &crossServiceCrossInClient{stream}
	return x, nil
}

type CrossService_CrossInClient interface {
	Send(*CrossLanguageRequest) error
	Recv() (*CrossLanguageRespose, error)
	grpc.ClientStream
}

type crossServiceCrossInClient struct {
	grpc.ClientStream
}

func (x *crossServiceCrossInClient) Send(m *CrossLanguageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *crossServiceCrossInClient) Recv() (*CrossLanguageRespose, error) {
	m := new(CrossLanguageRespose)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CrossServiceServer is the server API for CrossService service.
type CrossServiceServer interface {
	CrossIn(CrossService_CrossInServer) error
}

// UnimplementedCrossServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCrossServiceServer struct {
}

func (*UnimplementedCrossServiceServer) CrossIn(CrossService_CrossInServer) error {
	return status.Errorf(codes.Unimplemented, "method CrossIn not implemented")
}

func RegisterCrossServiceServer(s *grpc.Server, srv CrossServiceServer) {
	s.RegisterService(&_CrossService_serviceDesc, srv)
}

func _CrossService_CrossIn_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CrossServiceServer).CrossIn(&crossServiceCrossInServer{stream})
}

type CrossService_CrossInServer interface {
	Send(*CrossLanguageRespose) error
	Recv() (*CrossLanguageRequest, error)
	grpc.ServerStream
}

type crossServiceCrossInServer struct {
	grpc.ServerStream
}

func (x *crossServiceCrossInServer) Send(m *CrossLanguageRespose) error {
	return x.ServerStream.SendMsg(m)
}

func (x *crossServiceCrossInServer) Recv() (*CrossLanguageRequest, error) {
	m := new(CrossLanguageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _CrossService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CrossService",
	HandlerType: (*CrossServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CrossIn",
			Handler:       _CrossService_CrossIn_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sidechain/listener/cross/proto/cltms.proto",
}
